doctype html
html(lang="en")
  head
    meta(charset="utf-8")
    meta(name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no")
    title Pretty Code with Jade & Sass | Minnebar 2016
    link(rel="stylesheet" href="css/reveal.css")
    link(rel="stylesheet" href="css/theme/night.css")
    link(rel="stylesheet" href="lib/css/zenburn.css")
    link(rel="stylesheet" href="css/lemon-slides.css")
  body
    
    mixin techLogo(name, fragment, fileType)
      if fileType == "png"
        -src = 'img/'+name+'.png'
      else
        -src = 'svg/'+name+'.svg'
      if fragment
        .logo.fragment
          img(src="#{src}")
      else
        .logo
          img(src="#{src}")
    
    .reveal
      .slides
        section
          section(data-background="img/bg/titlecard.png")
            //-
              h3 Navigation:
              ol
                li Use the spacebar to go to the next frame.
                li Arrow keys also work, but the slides go up/down as well as left/right.
                li Hit ESC for a zoomed out view.
        section
          section#TitleCard(data-background="img/bg/tyra1.jpg")
            h2.shadow Let's write pretty code.
          section
            h2 Hi, I'm Lemon.
            h3.fragment I make websites.
            h4.fragment A lot of websites.
          section
            h1 Big ones like...
            ul.fragment
              li General Mills
              li United Health Group
              li Ramada Plaza
              li Lifetime Fitness
              li 3M
              li Minnesota Wild
              li US Bank
          section
            h5 Little ones like...
            ul.fragment
              li The Wrongest Words
              li Recent Firings In San Francisco
              li damn.dog
          section
            img(src="img/damndog-logo.png" style="width:40vh;")
            blockquote.fragment
              p The best game on the internet
              cite Gizmodo
          section
            h3 I tweet sometimes.
            h1.fragment @AhoyLemon
            p.fragment If you tweeted at me during this, that would be fine. Some people find it rude, but I like the attention.
          section(data-background="img/bg/fplus_sheet.png")
            h2.inverse I also do a podcast.
            p.inverse It's called 
              b The F Plus. 
              | We read terrible things with enthusiasm.
            p.inverse.fragment I'm proud of it, but it probably isn't appropriate for your workplace.
            p.inverse.fragment Anyway, you can go to 
              a(href="https://thefpl.us")
                b thefpl.us
              |  for that.
            
        section
          section
            h2 But let's talk about making websites.
          section(data-transition="zoom")
            h3 When I make websites I use...
            .tech-logos
              +techLogo('php', true)
              +techLogo('kirby', true)
              +techLogo('concrete5', true)
              +techLogo('drupal', true)
              +techLogo('wordpress', true)
              +techLogo('dotnet', true)
              +techLogo('knockout', true)
              +techLogo('nodejs', true)
              +techLogo('angular', true)
              +techLogo('ember', true)
              +techLogo('bourbon', true)
              +techLogo('beer', true)
              +techLogo('gin', true, "png")
              +techLogo('rum', true, "png")
          section(data-transition="zoom")
            h3 But really, all that technology amounts to...
            .tech-logos.fragment
              +techLogo('html5')
              +techLogo('css3')
              +techLogo('javascript')
          section(data-transition="zoom")
            h3 But to me, that means...
            .tech-logos
              +techLogo('jade')
              +techLogo('sass')
              +techLogo('jquery')
            h4.fragment(data-fragment-index="1") And that's what we're gonna talk about today.
            p.fragment(data-fragment-index="1") Well, Jade and Sass. We'll skip javascript for now.
        section(data-transition="none")
          section
            h3 These are preprocessors.
            .tech-logos.around
              +techLogo('jade')
              +techLogo('sass')
              //+techLogo('jquery')
          section
            h2 What is a preprocessor?
            p.fragment It's a way for you, as a developer to write quicker, prettier, more maintainable code, and let the computers do the crappy parts.
          section
            h3 Okay, let's use this as an example...
            .tech-logos
              +techLogo('jade')
              +techLogo('sass')
              +techLogo('jquery')
          section
            h3 Pretty code in...
            pre.fragment
              code.scss(data-trim data-noescape).
                .tech-logos { @include flex-container(); @extend %gutters;
                  .logo { @include flex-item(20%,0); }
                }
            h3.fragment Ugly code out...
            pre.fragment
              code.css(data-trim data-noescape).
                .reveal .tech-logos { display: -webkit-flex;
                                      display: -ms-flexbox;
                                      display: flex;
                                      -webkit-flex-direction: row;
                                      -ms-flex-direction: row;
                                      flex-direction: row;
                                      -webkit-flex-wrap: wrap;
                                      -ms-flex-wrap: wrap;
                                      flex-wrap: wrap;
                                      padding-top: 1em;
                                      padding-bottom: 1em; }
                .reveal .tech-logos .logo { width: 20%; 
                                            -webkit-flex-basis: 20%;
                                            -ms-flex-preferred-size: 20%;
                                            flex-basis: 20%;
                                            -webkit-flex-grow: 0;
                                            -ms-flex-positive: 0;
                                            flex-grow: 0;
                                            -webkit-flex-shrink: 1;
                                            -ms-flex-negative: 1;
                                            flex-shrink: 1;
                                            -webkit-align-self: auto;
                                            -ms-flex-item-align: auto;
                                            align-self: auto; }
          section
            h3 That was all
            .tech-logos.around
              +techLogo('sass')
            h4.fragment Sass stands for 
              b S
              | yntactically 
              b A
              | wesome 
              b S
              | tyle
              b S
              | heets
            h5.fragment The only rule: Don't capitalize Sass.
            h5.fragment Because Hampton Catlin will be disappointed in you.
          section(data-background="img/bg/hampton.jpg" data-background-size="contain")
          section
            h3 Hampton also made 
            .tech-logos.around
              +techLogo('haml')
            .fragment
              h4 It looks like this...
              pre
                code.haml(data-trim data-noescape).
                  #content
                    .left.column
                      %h2 Welcome to our site!
                      %p= print_information
                    .right.column
                      %label
                        %span Enter your name
                        %input(type=text selected)
          section
            h3 But I use...
            .tech-logos.around
              +techLogo('jade')
            .fragment
              h4 It looks like this...
              pre
                code.jade(data-trim data-noescape).
                  #content
                    .left.column
                      h2 Welcome to our site!
                      p= information
                    .right.column
                      label
                        span Enter your name
                        input(type=text selected)
          section
            h4 Haml
            pre
              code.haml(data-trim data-noescape).
                #content
                  .left.column
                    %h2 Welcome to our site!
                    %p= print_information
                  .right.column
                    %label
                      %span Enter your name
                      %input(type=text selected)
            h4 Jade
            pre
              code.jade(data-trim data-noescape).
                #content
                  .left.column
                    h2 Welcome to our site!
                    p= information
                  .right.column
                    label
                      span Enter your name
                      input(type=text selected)
            
            h5.fragment 7% fewer characters!*
            p.fragment(style="font-size:0.6em;") *This statistic from the same place Carly Fiorina gets her facts from.
          section
            h5 By the way...
            h3 Apparently Jade is called Pug now?
            .fragment
              h5 That seems unncessary.
              p But here's the logo...
              .tech-logos.around
                .logo
                  img(src='svg/pug.svg' style="width:20vh; height:20vh")
          section(data-background="img/bg/pug.png" data-background-size="contain")
            h2.fragment(style="color:#222222") Let's just keep calling it Jade.
        section
          section
            h3 To do all this stuff, you'll need a Task Runner.
            p A task runner can do a number of things, but the main use is that when you save a file, it'll process it into a different kind of file.
          section
            h3 There's a number of them to choose from.
            .tech-logos.around
              +techLogo('grunt', true)
              +techLogo('gulp', true)
            h5.fragment BUT, these are command line tools...
          section(data-background="img/bg/grunt.png" data-background-size="contain")
            h1.fragment CAN A BROTHER GET A GUI!?
          section
            h4 Because there's also...
            .tech-logos.around
              +techLogo('codekit', true, "png")
              +techLogo('prepros', true, "png")
            h5.fragment Personally, I use Prepros.
                      
          section(data-background="img/bg/prepros.png")
          section
            h3 Prepros supports
            .tech-logos.four-up
              +techLogo('sass')
              +techLogo('jade')
              +techLogo('less')
              +techLogo('stylus')
              +techLogo('haml')
              +techLogo('slim', false, "png")
              +techLogo('coffeescript')
              +techLogo('livescript')
            h5 And it does image compression too.
          section(data-background="img/bg/my-prepros.png" data-background-size="contain")
            .fragment(style="background-color:rgba(35,35,35,0.75); padding:1em;")
              ol
                li Download & Install
                li Add to project
                li Tweak settings if you like.
              p Now you can write Sass & Jade.
        section
          section
            h2 But why should I write Sass?
            .fragment
              ol
                li nesting
                li imports
                li variables
                li mixins
                li extends
                li BONUS: auto prefixing
          section(data-background="img/bg/beerdance.gif")
            h2.shadow LET'S TRY THEM ALL!!!
        section
          section
            h2 1. nesting
            p The most immediate change you can make.
            pre
              code.scss(data-trim data-noescape).
                .topnav { position:fixed; top:0; right:0; left:0; height:4rem;
                  .inner { padding-left:10px; padding-right:10px; }
                  a { color:white; text-decoration:none;
                    &.big { font-size:1.3em; }
                    &:hover { background:white; color:black; }
                  }
                }
          section
            h3 Sass
            pre
              code.scss(data-trim data-noescape).
                .topnav { position:fixed; top:0; right:0; left:0; height:4rem;
                  .inner { padding-left:10px; padding-right:10px; }
                  a { color:white; text-decoration:none;
                    &.big { font-size:1.3em; }
                    &:hover { background:white; color:black; }
                  }
                }
            h3 CSS
            pre
              code.css(data-trim data-noescape).
                .topnav { position:fixed; top:0; right:0; left:0; height:4rem; }
                .topnav .inner { padding-left:10px; padding-right:10px; }
                .topnav a { color:white; text-decoration:none; }
                .topnav a.big { font-size:1.3em; }
                .topnav a:hover { background:white; color:black;  }
          section
            h3 Any CSS file is already valid Sass.
            p Just change your .css file to .scss, and you're ready to start nesting.
          section
            h3 ⚠️ A BRIEF WARNING ⚠️
            p While nesting is useful, it can (like anything programming related) get out of hand.
            p If you can help it, try to limit your nesting to 4 deep
            pre
              code.scss(data-trim data-noescape).
                .because {
                  .this {
                    .is {
                      .not {
                        .how {
                          .you {
                            .should {
                              .write {
                                .code { color:lime; }
                              }
                            }
                          }  
                        }
                      }
                    }
                  }
                }
            p People get opinionated about this, but you'll be fine.
        section
          section
            h2 2. imports
            pre
              code.scss(data-trim data-noescape).
                @import "globals/_variables";
                @import "globals/_mixins";
                @import "globals/_reset";

                @import "sections/_header";
                @import "sections/_main";
                @import "sections/_footer";

                @import "pages/_home";
                @import "pages/_error";
                @import "pages/_email";
          section
            h3 With imports, you can break all your code into small, manageable pieces.
            p Move stuff around at will, or yank out entire imports and laugh at their demise. The world is yours!
            p.fragment This also prevents stuff like this...
          section(data-background="img/bg/chicago.png")
            h2.fragment(style="color:black;") The client wants you to change the footer CSS
            h1.fragment(style="color:black;") Good luck!
          section
            h3 Personally, I do dozens of imports in a project.
            p I keep them organized by what the block of code does, with broader ideas sharing a folder together.
            p That works for me, but you do you.
        section
          section
            h2 3. variables
            pre
              code.scss(data-trim data-noescape).
                // FONTS
                $font-size:14px;
                $light:300;
                $bold:700;
                $slab:'Roboto Slab', serif;

                // COLORS
                $white:#f0f1f2;
                $black:#333;
                $red:#b22028;

                // MEASUREMENTS 
                $topnav-height: 4rem;
                $mobile-max:780px;
                $desktop-min:781px;
          section
            h3 Let's code...
            pre
              code.scss(data-trim data-noescape).
                body { font-family:$font; font-size:$font-size; background:$white; color:$black; }
                h1 { font-weight:$bold; }
                header { height:$topnav-height;
                  .inner { height:($topnav-height / 2) }
                }
                @media screen and (max-width:$mobile-max) {
                  header { display:none; }
                }
          section
            h3 Variables means not having 17 accidental variations of the color red.
            p Or 
              code z-index:9999999;
            p Or changing the code a hundred times because the logo needed more padding.
        section
          section
            h2 4. mixins
            pre
              code.scss(data-trim data-noescape).
                @mixin flex-container($align:stretch, $direction:row, $wrap:wrap) {
                  display: flex;
                  flex-direction: $direction;
                  flex-wrap: $wrap;
                  @if ($align != "stretch") {
                    align-items: $align;
                  }
                }

                @mixin flex-item($basis, $grow:1, $shrink:1, $align:auto) {
                  @if $grow == 0 {
                    width:$basis;
                    flex-basis: $basis;
                  } @else {
                    flex-basis: $basis;
                  }
                  flex-grow: $grow;
                  flex-shrink: $shrink;
                  align-self: $align;
                }
                
                @mixin respond-to($media) {
                  @if $media == desktop {
                    @media only screen and (min-width: $desktop-min) { @content; }
                  }
                  @else if $media == mobile {
                    @media only screen and (max-width: $mobile-max) { @content; }
                  }
                }

                @mixin flex-split($desktop, $mobile) {
                  @include respond-to(desktop) { @include flex-item($desktop); }
                  @include respond-to(mobile) { @include flex-item($mobile); }
                }
          section
            h3 💖 Mixins are terrific! 💖
            .fragment
              p You can define basic ideas with default values, then alter those values for specific cases.
              p Which is like, kind of the point of CSS.
        section
          section
            h2 5. extends
            pre
              code.scss(data-trim data-noescape).
                %inner { width: 100%; max-width:$max-width; margin-left:auto; margin-right: auto; }
                %clearfix {
                  &:after { content: ""; display: table; clear: both; }
                }
                %quote {
                  &:before { content: '\201C'; }
                  &:after { content: '\201D'; }
                }
                header, main, footer { @extend %inner;
                  .float-container { @extend %clearfix; }
                }
                blockquote {
                  p { @extend %quote; }
                }
          section
            h3 Use extends whenever you notice you're typing the same series of commands.
            p If you see a design with a lot of the same padding, borders, shadows or hover effects used frequently, throw those in an extend.
            p This will make it much easier to change
              s if
              |  when the designer changes her mind about how they should look.
          section
            h3 mixins, extends, and variables work 
              i great 
              |  with imports!
            p None of these will end up in your processed CSS until they're actually used, so you can horde them like a dragon.
          section(data-background="img/bg/infinite.gif")
            h1.inverse.shadow REUSE THEM!
            p.inverse.shadow I have about a dozen Sass partials that I carry over into every new project, so I can keep writing the same code.
            p.inverse.shadow Also to prevent myself for looking up the hex code for Facebook Blue for the 100th time.
        section
          section
            h2 BONUS: Auto Prefixing
            p This is technically not a Sass thing, but you get it.
            p And you'll like it.
          section(data-background="img/bg/avery.gif")
            h2.shadow Let's talk animation!
          section
            h3 We're gonna make a sunrise...
            h4 Sass
            pre
              code.scss(data-trim data-noescape).
                @keyframes sunrise {
                  0% { bottom: 0; left: 340px; background: #f00; }
                  33% { bottom: 340px; left: 340px; background: #ffd630; }
                  66% { bottom: 340px; left: 40px; background: #ffd630; }
                  100% { bottom: 0; left: 40px; background: #f00; }
                }
                .sun { animation: 10s ease infinite; }
            .fragment
              h4 CSS
              pre
                code.css(data-trim data-noescape).
                  @-webkit-keyframes sunrise { 
                    0% { bottom: 0; left: 340px; background: #f00; }
                    33% { bottom: 340px; left: 340px; background: #ffd630; }
                    66% { bottom: 340px; left: 40px; background: #ffd630; }
                    100% { bottom: 0; left: 40px; background: #f00; }
                  }

                  @keyframes sunrise { 
                    0% { bottom: 0; left: 340px; background: #f00; }
                    33% { bottom: 340px; left: 340px; background: #ffd630; }
                    66% { bottom: 340px; left: 40px; background: #ffd630; }
                    100% { bottom: 0; left: 40px; background: #f00; }
                  }  
                  .sun { -webkit-animation: 10s ease infinite; animation: 10s ease infinite; }
          section
            h2 On every save, your preprocessor applies the prefixes.
            p Writing -ms-flex is for chumps.
        section
          section
            h2 Okay, so that's Sass.
          section
            h3 So what's this about
            .tech-logos.around
              +techLogo('jade')
          section
            h2  So, why should I write Jade?
            h5 A lot of the same reasons....
            ol.fragment
              li HTML is dumb
              li variables
              li includes
              li mixins
              li each/while loops
              li You're basically an expert at Sass now
        section
          section(data-background="img/bg/ralph.gif")
            h1.shadow 1. HTML is dumb
          section
            h2 That's not fair.
            p HTML was made by smart people, but it is basically immovable.
            p Any new stuff that's added to HTML has to exist alongside code that was approved in 1999.
            p Because of this, you end up typing weird things.
          section
            h2 Everything in HTML has to be closed.
            h5
              i Except when it doesn't.
            pre
              code.html(data-trim data-noescape).
                &lt;input type=&quot;text&quot; disabled=&quot;disabled&quot; /&gt;
                &lt;textarea required=&quot;required&quot;&gt;&lt;/textarea&gt;
                &lt;h1&gt;Headline&lt;/h1&gt;
                &lt;hr /&gt;
                &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;
                &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;
          section
            h3 A representative sample of Facebook's code
            pre.fragment
              code.html(data-trim).
                &lt;div&gt;
                  &lt;div&gt;
                    &lt;div&gt;
                      &lt;div&gt;
                        &lt;div&gt;
                          &lt;div&gt;
                            &lt;div&gt;
                              &lt;div&gt;
                                &lt;script src=&quot;SomeStupidTrackingScript.js&quot;&gt;&lt;/script&gt;
                              &lt;/div&gt;
                            &lt;/div&gt;
                          &lt;/div&gt;
                        &lt;/div&gt;
                      &lt;/div&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
            sub.fragment Source: Carly Fiorina
          section
            h3 Jade is indentation based.
            pre.fragment
              code.jade(data-trim).
                .so
                  .whenever
                    .you want to
                      .nest
                        .just hit
                          .tab
            pre.fragment
              code.html(data-trim).
                &lt;div class=&quot;so&quot;&gt;
                  &lt;div class=&quot;whenever&quot;&gt;
                    &lt;div class=&quot;you&quot;&gt;want to
                      &lt;div class=&quot;nest&quot;&gt;
                        &lt;div class=&quot;just&quot;&gt;hit
                          &lt;div class=&quot;tab&quot;&gt;&lt;/div&gt;
                        &lt;/div&gt;
                      &lt;/div&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
          section
            h3.sample-jade-headline With 
              span.green Jade
              | , you 
              i  only  
              code write the parts 
              span.bigger you 
                b need
                |  to.
            pre.fragment
              code.jade(data-trim).
                h3.jade-headline#JadeHeadline With 
                  span.green Jade
                  | , you 
                  i  only  
                  code write the parts 
                  span.bigger you 
                    b need
                    |  to.
            pre.fragment
              code.html(data-trim).
                &lt;h3 id=&quot;JadeHeadline&quot; class=&quot;jade-headline&quot;&gt;
                  With
                  &lt;span class=&quot;green&quot;&gt;Jade&lt;/span&gt;, you 
                  &lt;i&gt; only &lt;/i&gt;
                  &lt;code&gt;write the parts&lt;/code&gt;
                  &lt;span class=&quot;bigger&quot;&gt;you 
                    &lt;b&gt;need&lt;/b&gt; to.
                  &lt;/span&gt;
                &lt;/h3&gt;
        section
          section
            h2 2. variables
            - var lastUpdated = "#{lastUpdated}"
            pre
              code.jade(data-trim).
                - var pageTitle = "Your Lucky Number"
                - var lastUpdated = "04.20.2016"
                - var luckyNumber = Math.floor((Math.random() * 100) + 1);
                head
                  title= pageTitle
                  link(href="css/minnebar.css?updated=#{lastUpdated})
                body
                  h1 Your lucky number is
                    span.number= luckyNumber
          section
            h3 Just like Sass, you can define and redefine variables, and use them anywhere.
            p But unlike Sass, you can use any javascript function you like to create those variables.
            p Random numbers, conditional iterations, it's madness I tells ya, madness!
        section
          section
            h2 3. includes
            pre
              code.jade(data-trim).
                doctype html
                html(lang="en")
                  head
                    include partials/head.jade
                  body
                    include partials/topnav.jade
                    
                    main
                      h1 Welcome to my home page!
                    
                    include partials/footer.jade
                    include partials/javascripts.jade
          section
            h3 Partials allow you to only write things once.
            p Global markup is bound to change sometimes. By keeping everything segmented, you can reuse all the parts you'd otherwise have to write more than once.
          section(data-background="https://media.giphy.com/media/gYZ7qO81g4dt6/giphy.gif")
            h1.shadow Who needs PHP!?
          section
            h2 ...well, probably you.
            h4 (but maybe not.)
            p Unless you need a client-facing CMS, Jade can do most of the stuff you'd otherwise use PHP for.
            p Build some HTML and host it on GitHub for free.
        section
          section
            h2 4. mixins
            pre
              code.jade(data-trim).
                mixin button(text, url)
                  if url
                    a.active-button= text
                  else
                    .placeholder= text
                    
                +button("VISIT GOOGLE", 'http://google.com')
                +button('This is not a button')
          section
            h3 💖 Mixins are terrific! 💖
            p I know I said this earlier, but unfettered javascript accesss makes mixins even better. 
          section
            - var randomUnsplash = "https://unsplash.it/#{width}/#{height}"
            h3 Let's make a placeholder...
            pre
              code.jade(data-trim).
                mixin placeholder(caption, height, width)
                  - var tinaQuotes = ["Everyone touch each other's butts", "My heart!", "I put my bra on one boob at a time like everyone else.", "Dad, I need you to drop everything and shave my legs"]
                  if !caption
                    - caption = tinaQuotes[n]
                  if !height
                    - height = 600
                  if !width
                    - width = Math.floor((Math.random() * 600) + 500);
                  figure
                    img(src="#{randomUnsplash}")
                    figcaption= caption
                  n++
                  
                +placeholder("Hi boys, I'm Tina.",400,850)
                +placeholder("If boys had uteruses they’d be called duderuses")
                +placeholder()
          section
            h3 Here's what that looks like...
            - var n = 0
            mixin placeholder(caption, height, width)
              - var tinaQuotes = ["Everyone touch each other's butts", "My heart!", "I put my bra on one boob at a time like everyone else.", "Dad, I need you to drop everything and shave my legs"]
              if !caption
                - caption = tinaQuotes[n]
              if !height
                - height = 600
              if !width
                - width = Math.floor((Math.random() * 600) + 500);
              figure
                img(src="https://unsplash.it/#{width}/#{height}")
                figcaption= caption
              -n++
            .tina-figures 
              +placeholder("Hi boys, I'm Tina.",400,850)
              +placeholder("If boys had uteruses they’d be called duderuses.")
              +placeholder()
        section
          section
              h2 5. each/while loops
              - var testamonials = [ {text: "This Sass & Jade presentation is the Crank: High Voltage of tech talks!", cite: "Jason Statham"  }, {text: "Lemon just made me like a million times smarter", cite: "Neil DeGrasse Tyson" }, {text: "I heard this whole presentation is a terrorist conspiracy", cite: "Carly Fiorina" }, {text: "Butts.", cite: "Tina Belcher" } ];
              pre
                code.jade(data-trim).
                  - var testamonials = [ 
                      {text: "This Sass & Jade presentation is the Crank: High Voltage of tech talks!", cite: "Jason Statham"  },
                      {text: "Lemon just made me like a million times smarter", cite: "Neil DeGrasse Tyson" },
                      {text: "I heard this whole presentation is a terrorist conspiracy", cite: "Carly Fiorina" },
                      {text: "Butts.", cite: "Tina Belcher" }
                      ]
                  each quote in testamonials
                    blockquote
                      p= quote.text
                      cite= quote.cite
          section
            h3 People are raving about this presentation!
            each quote in testamonials
              blockquote
                p= quote.text
                cite= quote.cite
        section
          style.
            #KoreaSlide { top:0 !important; }
          section#KoreaSlide(data-background-video="video/korea.mp4")
            h2.shadow 6. and now....
            h4.shadow.fragment you're good at this.
            h4.shadow.fragment like, really good at this.
            h4.shadow.fragment Holy crap. 
          section
            h2 Okay,new languages are hard.
            p And with both of these languages, I had times where I wished I was writing code the old way. 
            p But when you get good at this stuff, you improve your workflow.
            p You write better, you write quicker, and you get the knowledge of knowing a new thing.
          section
            h3 Thanks for listening.
            p This slidedeck was written in Jade, Sass, and 
              a(href="http://lab.hakim.se/reveal-js" target="_blank") Reveal.js
            p Available online at 
              a(href="http://ahoylemon.github.io/minnebar2016") ahoylemon.github.io/minnebar2016
            .tech-logos.around
              .logo
                a(href="https://twitter.com/AhoyLemon" target="_blank")
                  img(src="svg/twitter.svg")
              .logo
                a(href="https://github.com/AhoyLemon" target="_blank")
                  img(src="svg/github.svg")
              .logo
                a(href="http://codepen.io/ahoylemon" target="_blank")
                  img(src="svg/codepen.svg")
              h3.full-width @AhoyLemon
              
    script(src="lib/js/head.min.js")
    script(src="js/reveal.js")
    script(type="text/javascript").
      // More info https://github.com/hakimel/reveal.js#configuration
      Reveal.initialize({
          history: true,

          // More info https://github.com/hakimel/reveal.js#dependencies
          dependencies: [
              { src: 'plugin/markdown/marked.js' },
              { src: 'plugin/markdown/markdown.js' },
              { src: 'plugin/notes/notes.js', async: true },
              { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }
          ]
      });